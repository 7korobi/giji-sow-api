{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"fs\"","webpack:///external \"lodash\"","webpack:///external \"express\"","webpack:///./api/base.coffee","webpack:///external \"body-parser\"","webpack:///external \"morgan\"","webpack:///./api/mongodb.coffee","webpack:///external \"mongodb-bluebird\"","webpack:///external \"child_process\"","webpack:///./spec/index.coffee","webpack:///external \"ava\"","webpack:///external \"supertest\"","webpack:///external \"js-yaml\"","webpack:///./spec/user.coffee","webpack:///./spec/book.coffee","webpack:///./spec/chat.coffee"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","bodyParser","logger","app","conf","use","json","req","res","next","header","_","fs","giji","mongo","sh","url","db","mongo_sow","connect","then","err","console","log","find","id","query","projection","collection","ObjectId","aggregate_message","cmd","firsts","out","keys","ext","remove","aggregate","$sort","date_min","$group","_id","date","$min","$out","data","Promise","all","map","face_id","mestype","story_id","q","insert","date_max","$max","max","$sum","count","story_ids","$addToSet","sow_auth_id","aggregate_potof","$match","$exists","$nin","$ne","is_finish","live","role_id","$unwind","aggregate_max","$project","$size","_id.face_id","list","top","sortBy","a","oldlog","$eq","dst","src","results","len","ref","length","api","push","writeFile","join","error","chmod","exec","stdout","stderr","scan","set_bases","set_base","logid","size","$strLenCP","$substr","catch","started","e","m_faces","faces","sow_auths","params","mestypes","roles","lives","state","$in","plans","fields","is_epilogue","comment","password","stories","ids","events","messages","potofs","bless","express","http","supertest","test","user","load","readFileSync","provider","icon","mail","nick","sign","write_at","Date","token","account","match","tgt","chk","result","index","input","this","deepEqual","deepContain","mergeWith","constructor","Array","post","base","base1","passport","session","agent","serial","async","text","send","JSON","parse","message","location","redirect","is","book","potof","label","chat","interval","night","player","mob","game","vote","vote_by","tag_ids","option","job","chats","idx","part","type","phases","handle","update","books","stats","cards","parts","phase_id","stat","give","sw","card"],"mappings":"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","file":"spec.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","module.exports = require(\"fs\");","module.exports = require(\"lodash\");","module.exports = require(\"express\");","bodyParser = require 'body-parser'\nlogger = require 'morgan'\n\nmodule.exports = (app, conf)->\n  app.use logger 'dev'\n  app.use bodyParser.json()\n  app.use (req, res, next)->\n    res.header \"Access-Control-Allow-Origin\", \"*\"\n    res.header \"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"\n    next()\n","module.exports = require(\"body-parser\");","module.exports = require(\"morgan\");","mongo = require \"mongodb-bluebird\"\nsh = require 'child_process'\nfs = require 'fs'\n_ = require \"lodash\"\n\nObjectId = false\n\ngiji = {}\n\nmodule.exports = (app, { url, db })->\n  return unless db.mongo_sow\n  mongo.connect db.mongo_sow\n  .then (db)->\n    end = (err, o)->\n      console.log err, o\n    giji.find = (id, query, projection)->\n      db.collection id, {ObjectId}\n      .find query, projection\n\n    giji.aggregate_message = ->\n      firsts = (out, keys, ext...)->\n        db.collection(out, { ObjectId }).remove({})\n        .then ->\n          db.collection(\"message_by_story_for_face\", {ObjectId}).aggregate [\n            $sort:\n              date_min: 1\n          ,\n            $group:\n              _id: keys\n              date:\n                $min: \"$date_min\"\n          ,\n            $out: \"#{out}_date_mins\"\n          ], {ObjectId}\n        .then (data)->\n          Promise.all data.map ({ _id, date })->\n            { story_id, face_id, mestype } = _id\n            db.collection(\"messags\", {ObjectId})\n            .find({ story_id, face_id, date })\n            .then (o)->\n              o.q = _id\n              o\n        .then (data)->\n          db.collection(out, { ObjectId }).insert data\n\n      cmd = (out, keys, ext...)->\n        db.collection(\"message_by_story_for_face\", {ObjectId}).aggregate [\n          ext...\n        ,\n          $group:\n            _id: keys\n            date_min:\n              $min: \"$date_min\"\n            date_max:\n              $max: \"$date_max\"\n            max:\n              $max: \"$max\"\n            all:\n              $sum: \"$all\"\n            count:\n              $sum: \"$count\"\n            story_ids:\n              $addToSet: \"$_id.story_id\"\n        ,\n          $out: out\n        ], {ObjectId}\n\n      Promise.all [\n        cmd \"message_for_face\",\n          face_id: \"$_id.face_id\"\n        cmd \"message_for_face_sow_auth\",\n          face_id:     \"$_id.face_id\"\n          sow_auth_id: \"$_id.sow_auth_id\"\n        cmd \"message_for_face_mestype\",\n          face_id: \"$_id.face_id\"\n          mestype: \"$_id.mestype\"\n        firsts \"message_firsts_for_story_face_mestype\",\n          story_id: \"$_id.story_id\"\n          face_id:  \"$_id.face_id\"\n          mestype:  \"$_id.mestype\"\n      ]\n\n\n    giji.aggregate_potof = ->\n      cmd = (out, story_ids, keys, ext...)->\n        db.collection(\"potofs\", {ObjectId}).aggregate [\n          ext...\n        ,\n          $match:\n            story_id:\n              $exists: 1\n              $nin: story_ids\n            sow_auth_id:\n              $exists: 1\n              $nin: [null, \"master\", \"admin\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\"]\n            face_id:\n              $exists: 1\n              $ne: null\n        ,\n          $group:\n            _id: keys\n            date_min:\n              $min: \"$timer.entrieddt\"\n            date_max:\n              $max: \"$timer.entrieddt\"\n            story_ids:\n              $addToSet: \"$story_id\"\n\n        ,\n          $out: out\n        ], {ObjectId}\n\n      giji.find \"stories\", { is_finish: false }, { _id: 1 }\n      .then (data)->\n        story_ids = data.map ({ _id })-> _id\n        console.log story_ids, \"is progress (deny).\"\n        Promise.all [\n          cmd \"potof_for_face\", story_ids,\n            face_id: \"$face_id\"\n          cmd \"potof_for_face_live\", story_ids,\n            face_id: \"$face_id\"\n            live: \"$live\"\n          cmd \"potof_for_face_sow_auth\", story_ids,\n            face_id:     \"$face_id\"\n            sow_auth_id: \"$sow_auth_id\"\n          cmd \"potof_for_face_role\", story_ids,\n            face_id: \"$face_id\"\n            role_id: \"$role\"\n          ,\n            $unwind: \"$role\"\n        ]\n\n    giji.aggregate_max = ->\n      db.collection(\"potof_for_face_sow_auth_max\", { ObjectId }).remove({})\n      .then ->\n        db.collection(\"potof_for_face_sow_auth\", { ObjectId }).aggregate [\n          $project:\n            _id: 1\n            count:\n              $size: \"$story_ids\"\n        ,\n          $group:\n            _id:\n              face_id: \"$_id.face_id\"\n            count:\n              $max: \"$count\"\n        ], {ObjectId}\n      .then (data)->\n        Promise.all data.map (o)->\n          giji.find \"potof_for_face_sow_auth\",\n            \"_id.face_id\": o._id.face_id\n            story_ids:\n              $size: o.count\n          .then (list)->\n            [top] = _.sortBy list, (a)-> a.date_min\n            o.date_min = top.date_min\n            o.date_max = top.date_max\n            o._id      = top._id\n            o\n      .then (data)->\n        db.collection(\"potof_for_face_sow_auth_max\", { ObjectId }).insert data\n\n    giji.oldlog = ->\n      db.collection(\"stories\", { ObjectId }).aggregate [\n        $match:\n          is_finish:\n            $eq: true\n      ,\n        $project:\n          _id: 1\n      ,\n        $group:\n          _id: null\n          story_ids:\n            $addToSet: \"$_id\"\n      ], {ObjectId}\n      .then ([o])->\n        data = for id in o.story_ids\n          dst = \"./static/sow/#{id}.json.gz\"\n          src = \"#{url.api}/story/oldlog/#{id}\"\n          \"\"\"  ls \"#{dst}\" || curl \"#{src}\" | gzip --stdout --best > \"#{dst}\"  \"\"\"\n\n        dst = \"./static/sow/index.json.gz\"\n        src = \"#{url.api}/story/oldlog\"\n        data.push \"\"\" curl \"#{src}\" | gzip --stdout --best > \"#{dst}\"  \"\"\"\n\n        dst = \"./static/aggregate/faces/index.json.gz\"\n        src = \"#{url.api}/aggregate/faces\"\n        data.push \"\"\" curl \"#{src}\" | gzip --stdout --best > \"#{dst}\"  \"\"\"\n\n        data.push \"\"\" npm run gulp amazon:gz \"\"\"\n\n        fs.writeFile './static/sow.sh', data.join(\"\\n\") , (err)->\n          if err\n            console.error err\n          else\n            console.log \"write.\"\n            fs.chmod './static/sow.sh', 0o777, (err)->\n              if err\n                console.error err\n              else\n                console.log \"chmod.\"\n                sh.exec \"./static/sow.sh\", (err, stdout, stderr)->\n                  if err\n                    console.error err\n                  else\n                    console.log stderr\n        false\n\n    giji.scan = ->\n      db.collection(\"message_by_story_for_face\", { ObjectId }).aggregate [\n        $group:\n          _id: null\n          story_ids:\n            $addToSet: \"$_id.story_id\"\n      ], {ObjectId}\n      .then ([o])->\n        list = o?.story_ids ? []\n        db.collection(\"stories\", { ObjectId }).aggregate [\n          $match:\n            _id:\n              $nin: list\n            is_finish:\n              $eq: true\n        ,\n          $project:\n            _id: 1\n        ,\n          $group:\n            _id: null\n            story_ids:\n              $addToSet: \"$_id\"\n        ], {ObjectId}\n      .then ([o])->\n        list = o?.story_ids ? []\n        console.log \"step B\"\n        console.log list\n        set_bases = for id in list\n          giji.set_base id\n        Promise.all set_bases\n\n    giji.set_base = (story_id)->\n      db.collection(\"messages\", { ObjectId }).aggregate [\n        $match:\n          story_id: story_id\n          sow_auth_id:\n            $exists: 1\n            $ne: null\n          face_id:\n            $exists: 1\n            $ne: null\n          logid:\n            $exists: 1\n            $ne: null\n          log:\n            $exists: 1\n            $ne: null\n      ,\n        $project:\n          sow_auth_id: 1\n          story_id: 1\n          face_id: 1\n          logid: 1\n          date: 1\n          size:\n            $strLenCP: \"$log\"\n      ,\n        $group:\n          _id:\n            sow_auth_id: \"$sow_auth_id\"\n            story_id: \"$story_id\"\n            face_id: \"$face_id\"\n            mestype:\n              $substr: [\"$logid\", 0, 2]\n          date_min:\n            $min: \"$date\"\n          date_max:\n            $max: \"$date\"\n          max:\n            $max: \"$size\"\n          all:\n            $sum: \"$size\"\n          count:\n            $sum: 1\n      ], {ObjectId}\n      .then (data)->\n        db.collection(\"message_by_story_for_face\").insert data\n\n  .catch ->\n    console.log \"!!! mongodb connect error !!!\"\n\n\n  app.get '/api/aggregate/job', (req, res, next)->\n    giji.scan()\n    .then ->\n      giji.aggregate_message()\n    .then ->\n      giji.aggregate_potof()\n    .then ->\n      giji.aggregate_max()\n    .then ->\n      giji.oldlog()\n    .then ->\n      res.json\n        started: true\n      next()\n    .catch (e)->\n      res.json e\n      next()\n\n  app.get '/api/aggregate/faces', (req, res, next)->\n    q = {}\n    Promise.all [\n      giji.find \"message_for_face\", q\n      giji.find \"potof_for_face\", q\n      giji.find \"potof_for_face_sow_auth_max\", q\n    ]\n    .then ([m_faces, faces, sow_auths])->\n      res.json { m_faces, faces, sow_auths }\n      next()\n    .catch (e)->\n      console.error req, e\n      next()\n\n  app.get '/api/aggregate/faces/:id', (req, res, next)->\n    { id } = req.params\n    q =\n      \"_id.face_id\": id\n    Promise.all [\n      giji.find \"message_for_face\", q\n      giji.find \"message_for_face_mestype\", q\n      giji.find \"message_for_face_sow_auth\", q\n      giji.find \"potof_for_face\", q\n      giji.find \"potof_for_face_role\", q\n      giji.find \"potof_for_face_live\", q\n    ]\n    .then ([m_faces, mestypes, sow_auths, faces, roles, lives])->\n      res.json { m_faces, mestypes, sow_auths, faces, roles, lives }\n      next()\n    .catch (e)->\n      console.error req, e\n      next()\n\n\n  app.get '/api/plan/progress', (req, res, next)->\n    q =\n      state:\n        $in: [\n          null\n          /議事/\n        ]\n    giji.find \"sow_village_plans\", q\n    .then (data)->\n      res.json { plans: data }\n      next()\n    .catch (e)->\n      console.error req, e\n      next()\n\n  app.get '/api/story/progress', (req, res, next)->\n    q =\n      is_epilogue: false\n      is_finish: false\n    fields =\n      comment:  0\n      password: 0\n    json = {}\n    giji.find \"stories\", q, fields\n    .then (data)->\n      json.stories = data\n      data.map (o)-> \"#{o._id}-0\"\n    .then (ids)->\n      giji.find \"events\",\n        _id:\n          $in: ids\n    .then (data)->\n      json.events = data\n    .then ->\n      res.json json\n      next()\n    .catch (e)->\n      console.error req, e\n      next()\n\n  app.get '/api/story/oldlog', (req, res, next)->\n    q =\n      is_epilogue: true\n      is_finish:   true\n    fields =\n      comment:  0\n      password: 0\n    Promise.all [\n      giji.find \"stories\", q, fields\n      giji.find \"potof_for_face\", {}\n    ]\n    .then ([stories, faces])->\n      res.json { stories, faces }\n      next()\n    .catch (e)->\n      console.error req, e\n      next()\n\n  app.get '/api/story/oldlog/:story_id', (req, res, next)->\n    { story_id } = req.params\n    fields =\n      password: 0\n    Promise.all [\n      giji.find \"stories\",  { _id: story_id, is_epilogue: true, is_finish: true}, fields\n      giji.find \"messages\", { story_id }\n      giji.find \"events\",   { story_id }\n      giji.find \"potofs\",   { story_id }\n    ]\n    .then ([stories, messages, events, potofs])->\n      unless stories.length\n        messages = events = potofs = []\n      res.json { stories, messages, events, potofs }\n      next()\n    .catch (e)->\n      console.error req, e\n      next()\n\n  return\n","module.exports = require(\"mongodb-bluebird\");","module.exports = require(\"child_process\");","test = require 'ava'\nexpress = require 'express'\nsupertest = require 'supertest'\n\nfs = require 'fs'\nyaml = require 'js-yaml'\n\n\nconf = yaml.load fs.readFileSync \"./config/spec.yml\", 'UTF-8'\n\nuser =\n  _id: \"local-test-user\"\n  provider: \"local-test\"\n  icon: \"https://s3-ap-northeast-1.amazonaws.com/giji-assets/images/portrate/w52.jpg\"\n  mail: \"7korobi.sys@gmail.com\"\n  nick: \"テスト中\"\n  sign: \"SIGN.SPEC\"\n  write_at: new Date - 0\n  token: \"DEADBEEF\"\n  account: \"user\"\n\n_ = require \"lodash\"\nbless = (t)->\n  t.match = (tgt, chk)->\n    result = [ tgt ]\n    result.index = 0\n    result.input = tgt\n    @deepEqual result, tgt.match chk\n\n  t.deepContain = (tgt, chk)->\n    chk = _.mergeWith chk, tgt, (c, o)->\n      switch c?.constructor\n        when null, undefined\n          o\n        when Array, Object\n          undefined\n        else\n          c\n    @deepEqual tgt, chk\n\napp = express()\nrequire(\"~/api/base\"    )(app, conf)\nrequire(\"~/api/mongodb\" )(app, conf)\n\napp.post '/test/session', (req, res, next)->\n  req.session.passport ?= {}\n  req.session.passport.user ?= user\n  res.json req.session.passport\n\nhttp = supertest.agent(app)\n\n\nrequire(\"~/spec/user\") app, { test, bless, http }\nrequire(\"~/spec/book\") app, { test, bless, http }\nrequire(\"~/spec/chat\") app, { test, bless, http }\n","module.exports = require(\"ava\");","module.exports = require(\"supertest\");","module.exports = require(\"js-yaml\");","user =\n  sign: \"公開サイン\"\n\nmodule.exports = (app, { test, http, bless })->\n  test.serial 'post api/user fail.', (t)->\n    await http.post \"/logout\"\n\n    { text } = await http\n    .post \"/api/user\"\n    .send\n      user:\n        sign: \"公開サイン\"\n\n    bless t\n    t.deepContain JSON.parse(text),\n      message: \"ログインしていません。\"\n\n  test.serial 'post api/user', (t)->\n    await http.post \"/test/session\"\n\n    { text } = await http\n    .post \"/api/user\"\n    .send { user }\n\n    bless t\n    t.deepContain JSON.parse(text), { user }\n\n  test 'get /auth/google/callback.', (t)->\n    { redirect, header: { location } } = await http.get \"/auth/google/callback\"\n\n    bless t\n    t.is redirect, true\n    t.match location, ///\n      https://accounts.google.com/o/oauth2/v2/auth\\?response_type=code&redirect_uri=http%3A%2F%2F127.0.0.1%3A\\d\\d\\d\\d\\d%2Fauth%2Fgoogle%2Fundefined%2Fauth%2Fgoogle%2Fcallback&client_id=TEST-CLIENT-ID\n    ///\n\n  test 'get /auth/facebook/callback.', (t)->\n    { redirect, header: { location } } = await http.get \"/auth/facebook/callback\"\n    \n    bless t\n    t.is redirect, true\n    t.match location, ///\n      https://www.facebook.com/dialog/oauth\\?response_type=code&redirect_uri=http%3A%2F%2F127.0.0.1%3A\\d\\d\\d\\d\\d%2Fauth%2Ffacebook%2Fundefined%2Fauth%2Ffacebook%2Fcallback&client_id=TEST-CLIENT-ID\n    ///\n","check = ->\n  book:\n    label: \"testcase\"\n    chat:\n      interval: \"1d\"\n      night:    \"0\"\n      player: 4\n      mob:    0\n    game:\n      vote: \"sign\"\n      vote_by: [\"live\"]\n    tag_ids: [\"god\", \"travel\"]\n    option: [\"vote_by_live\"]\n\n  potof:\n    _id: \"test-1-NPC\"\n    face_id: \"sf10\"\n    job: \"保安技師\"\n    sign: '公開サイン'\n  \n  chats: [\n    idx: \"welcome\"\n  ,\n    idx: \"vrule\"\n    log: \"\"\"\n1. 多重ログインをしない。\n2. システムの出力内容を、そのまま書き写さない。\n3. エピローグまで秘密を守る。参加中の村の内容は秘密だ。\n4. エピローグまで秘密を守る。希望した能力、画面を見ているきみが何者なのかは秘密だ。\n      \"\"\"\n  ]\n\n  part:\n    _id: \"test-1-1\"\n    idx: \"1\"\n    label: \"一日目\"\n\nmodule.exports = (app, { test, http, bless })->\n  test.serial 'post api/books', (t)->\n    await http.post \"/test/session\"\n\n    { book, potof } = check()\n    { text } = await http\n    .post \"/api/books\"\n    .type 'json'\n    .send { book, potof }\n\n    bless t\n    t.deepContain JSON.parse(text),\n      book: check().book\n      potof:\n        idx: \"NPC\"\n        face_id: \"sf10\"\n\n        job: \"保安技師\"\n        sign: \"公開サイン\"\n      part:\n        idx: \"0\"\n        label: \"プロローグ\"\n      phases: [\n        idx: \"BM\"\n        handle: \"MAKER\"\n        update: true\n      ,\n        idx: \"MM\"\n        handle: \"SSAY\"\n        update: true\n      ,\n        idx: \"TM\"\n        handle: \"private\"\n        update: false\n      ,\n        idx: \"SM\"\n        handle: \"public\"\n        update: false\n      ,\n        idx: \"TS\"\n        handle: \"TSAY\"\n        update: false\n      ,\n        idx: \"Aim\"\n        handle: \"AIM\"\n        update: false\n      ,\n        idx: \"SS\"\n        handle: \"SSAY\"\n        update: false\n      ,\n        idx: \"VS\"\n        handle: \"VSAY\"\n        update: false\n      ]\n      chats: [\n        idx: \"welcome\"\n      ,\n        idx: \"nrule\"\n      ,\n        idx: \"vrule\"\n      ,\n        idx: \"0\"\n      ]\n\n\n  test 'post api/books/:book_id', (t)->\n    { book, potof } = check()\n\n    { text } = await http\n    .post \"/api/books/test-1\"\n    .type 'json'\n    .send { book, potof }\n\n    bless t\n    t.deepContain JSON.parse(text),\n      book: check().book\n      potof: check().potof\n      phases: [\n        _id: \"test-1-0-BM\"\n        idx: \"BM\"\n      ,\n        _id: \"test-1-0-MM\"\n        idx: \"MM\"\n      ]\n      chats: [\n        _id: \"test-1-0-BM-welcome\"\n        idx: \"welcome\"\n      ,\n        _id: \"test-1-0-BM-nrule\"\n        idx: \"nrule\"\n      ,\n        _id: \"test-1-0-BM-vrule\"\n        idx: \"vrule\"\n      ]\n\n  test 'post api/books/:book_id/part', (t)->\n    { part } = check()\n\n    { text } = await http\n    .post \"/api/books/test-1/part\"\n    .type 'json'\n    .send { part }\n\n    bless t\n    t.deepContain JSON.parse(text),\n      part: check().part\n      phases: [\n        idx: \"TM\"\n        handle: \"private\"\n        update: false\n      ,\n        idx: \"SM\"\n        handle: \"public\"\n        update: false\n      ,\n        idx: \"TS\"\n        handle: \"TSAY\"\n        update: false\n      ,\n        idx: \"Aim\"\n        handle: \"AIM\"\n        update: false\n      ,\n        idx: \"SS\"\n        handle: \"SSAY\"\n        update: false\n      ,\n        idx: \"VS\"\n        handle: \"VSAY\"\n        update: false\n      ]\n      chats: [\n        idx: \"0\"\n      ]\n\n\n  test 'get api/books', (t)->\n    { text } = await http\n    .get \"/api/books\"\n\n    bless t\n    for book in JSON.parse(text).books\n      t.deepContain book, check().book\n\n  test 'get api/books/:book_id', (t)->\n    { text } = await http\n    .get \"/api/books/test-1\"\n\n    bless t\n    t.deepContain JSON.parse(text),\n      book: check().book\n      potofs: []\n      stats: []\n      cards: []\n      parts: []\n      phases: []\n\n  test 'get api/books/:book_id/chats', (t)->\n    { text } = await http\n    .get \"/api/books/test-1/chats\"\n\n    bless t\n    t.deepContain JSON.parse(text),\n      chats: []\n","check = ->\n  potof:\n    face_id: \"sf10\"\n    job: \"保安技師\"\n    sign: '公開サイン'\n  \n  part:\n    _id: \"test-1-1\"\n    idx: \"1\"\n    label: \"一日目\"\n\nmodule.exports = (app, { test, http, bless })->\n  test 'post api/books/test-1/potof.', (t)->\n    await http.post \"/test/session\"\n\n    { potof } = check()\n    { text } = await http\n    .post \"/api/books/test-1/potof\"\n    .type 'json'\n    .send { potof, phase_id: 'test-1-1-SSAY' }\n\n    bless t\n    t.deepContain JSON.parse(text),\n      stat:\n        idx: 'SSAY'\n        give: 0\n        sw: false\n      card:\n        idx: 'request'\n        role_id: null\n      chat: {}\n      potof\n"],"sourceRoot":""}